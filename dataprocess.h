#ifndef DATAPROCESS_H
#define DATAPROCESS_H

#include <QtSql>
#include <QStringList>
#include <QVector>
#include <QList>
#include <QFile>
#include <QString>
#include <QStringList>
#include <QMap>
#include <QPair>
#include <QObject>
#include "analyseparas.h"
#include "utils.h"
#include "calcexpression.h"

//author: zyn
//time  : 2016-06-02
//class DataProcess:
//      process the data from mysql.
//      provide interface for graphic.

class DataProcess : public QObject
{
     Q_OBJECT
public:
    explicit DataProcess(QObject *parent = 0);

    // pre-processing
    // interact with database
    QStringList queryTableNameListbyDBName(QString db_name);
    QStringList queryColumnNameListInTable(QString db_name, QString table_name);
    QVector<double> queryRawDataBySelTableColName(QString db_name, QString tb_name, QString col_name,
                                                  QDateTime start_time, QDateTime end_time);
//    void preProccess(QString db_name, QStringList tb_name, QVector<AnalyseParas>, QVector<FilterCond>);
    void preProccess(QMap<QString, AnalyseParas> analyse_paras);

    // get data from QMap(db_raw_data), raw_data, queried from database, for pre-process
    QVector<double> getFromRawDataMap(QString list);
    // get data from QMap(after_process_data_map), generated by pre-process, for post-process
    QVector<double> getFromAfterProcessDataMap(QString list);
    int getAfterDataMapSize() { return after_preproc_data_map.size(); }
    QStringList getNamePostProcessData();
    void exportDataToFiles(QString path, bool is_rawdata);
    void clearRawDataMap() {raw_data_map.clear();}
    void clearAfterPreProcDataMap() {after_preproc_data_map.clear();}
    void clearFreqList(){freq_list.clear();}


    // post-processing // 2016.6.10 by lsq.
    const QMap<QString, QVector<double> > &getPostProcDataMap() { return this->postproc_data_map; }
    void removeColFromPostProcData(QString col_name) {
        QMap<QString, QVector<double> >::Iterator findit = postproc_data_map.find(col_name);
        if (findit != postproc_data_map.end()) postproc_data_map.erase(findit);
    }
    void addColsToPostProcDataDirectly(QStringList col_name_list);
    void addColToPostProcDataDirectly(QString name, QVector<double> value) {
        postproc_data_map[name] = value;
    }
    QString addColToPostProcDataByExpr(bool is_scalar, QString data1, QString data2, int op, double operand, QString new_col_name);
    void delColsFromPostProcDataByName(QStringList col_name_list);
    void clearPostproc_data_map() { postproc_data_map.clear(); }

signals:
    void preProcessRate(int);
    void preProcessEnd();

public:
    QString getDBAddress() {return db_address_;};
    void setDBAddress(QString addr) { db_address_ = addr; }
    QString getDBUsername() {return db_username_;}
    void setDBUsername(QString username) {db_username_ = username;}
    QString getDBPassword() {return db_password_;}
    void setDBPassword(QString passwd) {db_password_ = passwd;}
    QVector<QString> getDBNameList() { return db_name_list_; }
    void setDBNameList(QVector<QString> list) { db_name_list_ = list; }

private :
    QString db_address_;
    QString db_username_;
    QString db_password_;
    QVector<QString> db_name_list_;

    // pre-processing
    // map: <tablename.colname, arrayvalue>
    QMap<QString, QVector<double> > raw_data_map;
    // map: <tablename.colname, arrayvalue>
    QMap<QString, QVector<double> > after_preproc_data_map;
    // frequency list, used to generate time column data.
    QVector<int> freq_list;


    // post-processing
    QMap<QString, QVector<double> > postproc_data_map;

    //one-dimensinal map : key, attribute name. value, map<>
    //two-dimensinal map : key, data name. value, data attribute value.
    //FIXME: private or public?
    QMap<QString, QMap<QString, double> > attributeMap;

    QList<QFile *> files;
};

#endif // DATAPROCESS_H
