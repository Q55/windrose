#ifndef DATAPROCESS_H
#define DATAPROCESS_H

#include <QtSql>
#include <QStringList>
#include <QVector>
#include <QList>
#include <QFile>
#include <QString>
#include <QStringList>
#include <QMap>
#include <QPair>
#include <QObject>
#include "analyseparas.h"
//#include "filtercond.h"

//author: zyn
//time  : 2016-06-02
//class DataProcess:
//      process the data from mysql.
//      provide interface for graphic.

class DataProcess : public QObject
{
     Q_OBJECT
public:
    explicit DataProcess(QObject *parent = 0);

    // interact with database
    QStringList queryTableNameListbyDBName(QString db_name);
    QStringList queryColumnNameListInTable(QString db_name, QString table_name);
    QVector<double> queryRawDataBySelTableColName(QString db_name, QString tb_name, QString col_name, QDateTime start_time, QDateTime end_time);

//    void preProccess(QString db_name, QStringList tb_name, QVector<AnalyseParas>, QVector<FilterCond>);
    void preProccess(QMap<QString, AnalyseParas> analyse_paras);

    // get data from QMap(db_raw_data), raw_data, queried from database, for pre-process
    QVector<double> getFromRawDataMap(QString list);
    // get data from QMap(after_process_data_map), generated by pre-process, for post-process
    QVector<double> getFromAfterProcessDataMap(QString list);

public slots:

    //FIXME: input may be QStringList
    void exportToFile(QString data);

signals:
    void preProcessRate(int);

private :
    // map: <tablename.colname, arrayvalue>
    QMap<QString, QVector<double> > raw_data_map;
    // map: <tablename.colname, arrayvalue>
    QMap<QString, QVector<double> > after_process_data_map;


    //one-dimensinal map : key, attribute name. value, map<>
    //two-dimensinal map : key, data name. value, data attribute value.
    //FIXME: private or public?
    QMap<QString, QMap<QString, double> > attributeMap;

    QList<QFile *> files;
};

#endif // DATAPROCESS_H
